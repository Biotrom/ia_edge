/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 14.12.2021 20:31:03

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[20] = { 0.034667722880840302, 0.012069900520145893, -0.020789727568626404, -0.035306558012962341, 0.31965246796607971, 0.40818414092063904, 0.35475760698318481, 0.44834733009338379, 0.36521250009536743, 0.0097725512459874153, 0.37247422337532043, 0.3164842426776886, 0.26783442497253418, -0.10192105174064636, -0.034668911248445511, 0.26907315850257874, 0.073766663670539856, 0.34604167938232422, 0.10371138900518417, -0.065910585224628448, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(8) float tensor_data2[10] = { -0.020666569471359253, 0.27405291795730591, 0.27476644515991211, 0.25493055582046509, 0.26255691051483154, 0.23241867125034332, 0.039719335734844208, -0.063335061073303223, 0.11329994350671768, -0.070891804993152618, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(8) float tensor_data3[3] = { -0.12052406370639801, -0.21543337404727936, 0.17439062893390656, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(8) float tensor_data4[20*33] = { 
  -0.25650045275688171, -0.23030075430870056, -0.13456140458583832, 0.10254622995853424, 0.02320670522749424, 0.14180074632167816, -0.43781003355979919, -0.25241184234619141, -0.28065446019172668, 0.0021573756821453571, -0.37155196070671082, -0.19574055075645447, -0.28118205070495605, 0.3726411759853363, 0.2142728716135025, 0.33231648802757263, 0.28892993927001953, -0.26035040616989136, 0.30603685975074768, -0.12699554860591888, 0.13585557043552399, -0.919716477394104, 0.25941988825798035, -0.49594986438751221, 0.037327330559492111, -0.18839429318904877, -0.41355434060096741, 0.21768990159034729, -0.16337892413139343, 0.19046539068222046, -0.26703953742980957, -0.64646869897842407, -0.61268627643585205, 
  0.0058398344554007053, 0.094701170921325684, -0.030699338763952255, -0.16460055112838745, 0.032968915998935699, 0.27681487798690796, 0.17611183226108551, 0.23639479279518127, -0.30480730533599854, 0.18564032018184662, 0.16531842947006226, -0.18258275091648102, -0.1068539023399353, -0.30880177021026611, -0.14586168527603149, -0.090141743421554565, -0.081860274076461792, -0.23592375218868256, 0.25433161854743958, 0.17127721011638641, -0.018402781337499619, -0.15169897675514221, -0.28405410051345825, -0.22326549887657166, 0.074635408818721771, -0.22355133295059204, 0.052449371665716171, 0.12163664400577545, -0.20684467256069183, 0.0098782368004322052, 0.30332699418067932, 0.30293172597885132, -0.3192608654499054, 
  -0.017068497836589813, -0.21483644843101501, -0.28898555040359497, 0.15523777902126312, -0.010584703646600246, 0.078970611095428467, -0.31609451770782471, -0.14760693907737732, -0.26528936624526978, 0.073520727455615997, -0.065452679991722107, -0.082953862845897675, -0.27995789051055908, -0.048066038638353348, 0.16548234224319458, -0.30563873052597046, -0.22762250900268555, -0.07836836576461792, 0.25075086951255798, -0.3512992262840271, 0.33852449059486389, 0.056471280753612518, -0.20024137198925018, 0.046854913234710693, -0.19841836392879486, 0.25399070978164673, 0.020726939663290977, -0.17104701697826385, -0.053372174501419067, -0.2340875118970871, -0.27916264533996582, 0.23531827330589294, -0.3006153404712677, 
  -0.34063583612442017, -0.095546871423721313, -0.28173187375068665, 0.12757627665996552, 0.06838671863079071, 0.079394996166229248, -0.24415196478366852, 0.037173494696617126, 0.018891084939241409, 0.26168587803840637, -0.0043198047205805779, -0.30495434999465942, 0.019899243488907814, 0.13017338514328003, 0.013435988686978817, -0.18526226282119751, -0.11789052933454514, -0.097238838672637939, 0.3015609085559845, 0.1745973527431488, -0.34986972808837891, -0.21307551860809326, 0.30863562226295471, -0.021259060129523277, -0.070712320506572723, 0.29002073407173157, 0.0015108183724805713, -0.11186555773019791, 0.25023278594017029, 0.035719040781259537, -0.019401667639613152, 0.22776247560977936, 0.016440240666270256, 
  0.042745437473058701, 0.18689559400081635, -0.17478398978710175, 0.2070959210395813, 0.13544903695583344, 0.3037872314453125, -0.018492138013243675, -0.17736156284809113, 0.043035134673118591, 0.149664506316185, 0.71336591243743896, 0.14513203501701355, 0.081957258284091949, -0.021500535309314728, -0.30892845988273621, 0.1138802096247673, -0.09607657790184021, 0.13142983615398407, 0.035169094800949097, 0.097233258187770844, 0.40847569704055786, 0.52224105596542358, 0.1614278107881546, 0.31716659665107727, -0.19642415642738342, -0.13930796086788177, 0.47275054454803467, 0.03342166543006897, 0.32160663604736328, -0.20985409617424011, 0.1889030784368515, 0.20135800540447235, 0.47524383664131165, 
  0.29386371374130249, -0.14199948310852051, -0.071692660450935364, 0.0046036625280976295, 0.00067872391082346439, 0.096801780164241791, -0.059556897729635239, 0.15478378534317017, 0.017892424017190933, -0.2662811279296875, -0.69145196676254272, -0.13300497829914093, 0.31855425238609314, -0.17541392147541046, 0.29590469598770142, 0.027069838717579842, -0.20848697423934937, -0.046943731606006622, 0.29796960949897766, 0.19562642276287079, -0.4706021249294281, -0.93646037578582764, 0.12039756774902344, -0.15960963070392609, -0.06766810268163681, 0.20831145346164703, -0.056235078722238541, 0.049612399190664291, 0.24468092620372772, 0.21758463978767395, 0.1215636134147644, 0.13435612618923187, -0.54668498039245605, 
  0.042675595730543137, 0.31968849897384644, -0.033960279077291489, -0.20037901401519775, -0.18705911934375763, -0.050261106342077255, -0.018773665651679039, -0.052836906164884567, -0.11710949242115021, 0.258279949426651, -0.15713754296302795, 0.010579505003988743, -0.4259282648563385, -0.33913803100585938, 0.16260610520839691, 0.0073816538788378239, -0.1311296671628952, 0.11681640148162842, 0.043875385075807571, -0.13906863331794739, 0.064582586288452148, -0.018396997824311256, 0.65227389335632324, -0.31674447655677795, -0.0086608231067657471, -0.11747536063194275, -0.28346055746078491, 0.025531638413667679, 0.040246598422527313, 0.036787178367376328, 0.3740772008895874, 0.055778875946998596, 0.046533647924661636, 
  0.053101770579814911, 0.38011530041694641, -0.26141324639320374, -0.0073462557047605515, -0.35421076416969299, 0.34120705723762512, -0.010413424111902714, -0.21652495861053467, 0.35124990344047546, -0.2579578161239624, 0.099782809615135193, -0.065146714448928833, -0.18353009223937988, -0.18484248220920563, -0.13758337497711182, -0.11176853626966476, 0.055786173790693283, -0.28323444724082947, -0.10399943590164185, -0.17386862635612488, -0.22729212045669556, -0.39869460463523865, 0.025587914511561394, -0.010621069930493832, 0.009616517461836338, -0.48918810486793518, 0.071688733994960785, 0.026750968769192696, 0.024951804429292679, 0.27611172199249268, -0.24105031788349152, 0.36869555711746216, -0.27101418375968933, 
  0.20803514122962952, 0.17197485268115997, 0.10981220752000809, -0.28534805774688721, 0.19392615556716919, 0.11024594306945801, -0.27136284112930298, -0.008022679015994072, 0.18827055394649506, -0.26607844233512878, -0.81477254629135132, 0.34015136957168579, -0.014926002360880375, -0.15238466858863831, -0.25508800148963928, -0.2724611759185791, 0.017084397375583649, -0.26347905397415161, 0.3028968870639801, -0.049230225384235382, -0.33336299657821655, -0.64027279615402222, 0.062328971922397614, -0.26607593894004822, -0.0080362241715192795, 0.34135162830352783, -0.40538012981414795, 0.18839788436889648, 0.27625614404678345, 0.10581733286380768, -0.19642902910709381, -0.088066935539245605, -0.71696352958679199, 
  0.080347083508968353, 0.12977708876132965, -0.043828044086694717, 0.19500666856765747, -0.44589740037918091, -0.15339605510234833, -0.22614958882331848, -0.12208776921033859, 0.2367970198392868, -0.098866403102874756, -0.37664467096328735, -0.091511376202106476, -0.19053588807582855, -0.033389616757631302, 0.10785920917987823, -0.21972441673278809, 0.11788610368967056, 0.12254228442907333, 0.3146882951259613, -0.38993379473686218, -0.026753664016723633, -0.64573222398757935, -0.019773319363594055, 0.22503721714019775, 0.41875976324081421, -0.13155518472194672, -0.10617499798536301, -0.17720353603363037, 0.29126012325286865, 0.38030055165290833, -0.19782234728336334, 0.062788203358650208, -0.35710877180099487, 
  -0.013542372733354568, -0.32913228869438171, -0.38943898677825928, -0.32967779040336609, 0.21457140147686005, -0.23213736712932587, 0.0201905257999897, -0.069552525877952576, -0.05226406455039978, 0.14501568675041199, -0.031778402626514435, 0.46335551142692566, 0.13420143723487854, 0.17023056745529175, -0.17752721905708313, -0.34789055585861206, -0.30707719922065735, 0.11406765133142471, -0.21079675853252411, -0.12769700586795807, -0.26075148582458496, -0.020202785730361938, 0.55781221389770508, -0.39714539051055908, -0.26122090220451355, -0.043179217725992203, -0.38734987378120422, 0.11344268918037415, 0.025257930159568787, -0.28315046429634094, 0.43126007914543152, 0.031412284821271896, -0.12912780046463013, 
  0.3853161633014679, 0.21012569963932037, -0.0063049057498574257, -0.042995810508728027, 0.045667700469493866, 0.26667556166648865, 0.16430684924125671, 0.27512621879577637, 0.38344800472259521, 0.3939342200756073, 0.13404573500156403, 0.35684084892272949, 0.089058741927146912, -0.25491297245025635, -0.23316299915313721, 0.17481459677219391, 0.092176295816898346, 0.26027029752731323, 0.21892258524894714, 0.17829877138137817, 0.24326500296592712, 0.22305969893932343, 0.15624387562274933, 0.21197284758090973, 0.11962535232305527, -0.20952130854129791, 0.02103562094271183, 0.24379043281078339, -0.17194032669067383, -0.017098629847168922, -0.20612767338752747, 0.34830248355865479, 0.039467807859182358, 
  0.096300408244132996, 0.15255460143089294, 0.062105625867843628, -0.24305546283721924, 0.26003468036651611, -0.1342879980802536, 0.30723318457603455, -0.18578517436981201, -0.056501403450965881, 0.29742312431335449, 0.49768996238708496, -0.14065368473529816, -0.20384010672569275, 0.22434252500534058, 0.20121380686759949, -0.2994438111782074, 0.17869576811790466, 0.11560124903917313, -0.39972701668739319, -0.11816806346178055, -0.080949664115905762, 0.44867977499961853, 0.45713663101196289, 0.080791421234607697, -0.47707131505012512, -0.11359767615795135, -0.20888502895832062, -0.0079048145562410355, 0.24732287228107452, -0.35874167084693909, 0.26134893298149109, 0.071136727929115295, 0.37135705351829529, 
  0.043336678296327591, 0.098228402435779572, -0.051511466503143311, 0.24060586094856262, 0.097410112619400024, -0.025968890637159348, 0.37554222345352173, -0.098961696028709412, 0.10616748780012131, 0.29190093278884888, 0.79424625635147095, 0.37761667370796204, 0.24763667583465576, -0.081164263188838959, -0.016778694465756416, 0.18535470962524414, -0.11498578637838364, 0.06834353506565094, 0.059093628078699112, 0.33012470602989197, -0.019750583916902542, 0.40087443590164185, 0.31078833341598511, 0.050106070935726166, -0.44278848171234131, 0.25491020083427429, 0.33921712636947632, -0.023057011887431145, 0.31263956427574158, -0.28753405809402466, -0.20601922273635864, 0.61435383558273315, 0.60061216354370117, 
  -0.14465610682964325, -0.31616318225860596, 0.37881681323051453, -0.15719999372959137, 0.27361196279525757, -0.0018172198906540871, 0.20754510164260864, 0.28545162081718445, 0.08924681693315506, 0.028225673362612724, -0.23067615926265717, -0.035318098962306976, -0.28555983304977417, -0.088935963809490204, -0.056573208421468735, 0.085881136357784271, -0.15172828733921051, -0.021284194663167, -0.11181540042161942, -0.28084540367126465, 0.05771714448928833, 0.2034098356962204, -0.26930022239685059, 0.090841874480247498, 0.15230140089988708, 0.02166837640106678, -0.29388025403022766, -0.029009459540247917, -0.024385921657085419, 0.043232399970293045, -0.094674780964851379, -0.11817692965269089, 0.18842899799346924, 
  -0.13031323254108429, 0.23436902463436127, -0.20524254441261292, 0.029554538428783417, -0.22054722905158997, 0.16182123124599457, -0.29589250683784485, -0.17690959572792053, -0.074552722275257111, 0.11809144914150238, -0.35496243834495544, 0.12247651070356369, -0.18663209676742554, -0.24406945705413818, 0.22543014585971832, -0.39261919260025024, -0.097370840609073639, 0.13928739726543427, 0.058592066168785095, 0.07189728319644928, -0.080491043627262115, -0.2931952178478241, 0.30647113919258118, -0.31010377407073975, -0.25791892409324646, -0.2258179783821106, 0.046913854777812958, 0.056831944733858109, -0.09207172691822052, -0.11831419914960861, -0.37162879109382629, -0.32581165432929993, -0.40438947081565857, 
  -0.15007039904594421, 0.38310179114341736, 0.10750832408666611, 0.05015525221824646, -0.23443183302879333, -0.29090231657028198, -0.33600339293479919, -0.12513990700244904, -0.05500895157456398, -0.14010770618915558, -0.4852372407913208, -0.23907659947872162, -0.2105116993188858, -0.32338103652000427, -0.085595667362213135, 0.096536889672279358, 0.30709013342857361, 0.085625424981117249, -0.33785614371299744, -0.055769912898540497, -0.4680124819278717, -0.73412406444549561, -0.13013222813606262, 0.26605817675590515, 0.35103440284729004, 0.21441209316253662, -0.00084403250366449356, 0.12062209099531174, 0.38024759292602539, 0.3994198739528656, -0.072523236274719238, -0.023865770548582077, -0.55464369058609009, 
  0.011598735116422176, -0.038213025778532028, -0.38387566804885864, -0.37532255053520203, 0.22622337937355042, -0.011884433217346668, 0.14150835573673248, 0.14882715046405792, -0.24503481388092041, 0.029277943074703217, 0.099437318742275238, 0.24070371687412262, 0.064764648675918579, -0.16866102814674377, -0.11985174566507339, -0.14625220000743866, -0.049703609198331833, -0.10377118736505508, -0.24406979978084564, 0.19958610832691193, -0.33581876754760742, -0.063456162810325623, 0.49272772669792175, -0.32119539380073547, 0.22080405056476593, -0.12601391971111298, -0.31082218885421753, 0.23458544909954071, 0.11756195873022079, 0.17349410057067871, 0.27215209603309631, 0.12405785173177719, 0.32759922742843628, 
  -0.185784712433815, -0.06995990127325058, 0.31496277451515198, 0.29862624406814575, 0.27754867076873779, 0.17349991202354431, 0.027016200125217438, -0.14037807285785675, -0.081458121538162231, 0.028572166338562965, -0.31401792168617249, -0.23349970579147339, 0.30150657892227173, -0.09879273921251297, -0.19895586371421814, 0.18441419303417206, -0.21700547635555267, -0.16304996609687805, -0.29204264283180237, -0.082370012998580933, 0.035012912005186081, -0.46731874346733093, -0.1489366888999939, 0.28227004408836365, -0.16215890645980835, -0.2335851788520813, 0.2462751716375351, -0.015597878955304623, 0.14496803283691406, -0.013013806194067001, 0.18564260005950928, 0.08482632040977478, 0.16810949146747589, 
  -0.02046017162501812, 0.25967100262641907, 0.33736675977706909, 0.27251464128494263, 0.19008997082710266, 0.13186578452587128, 0.1962677389383316, -0.27660337090492249, 0.31790751218795776, 0.36611321568489075, 0.24602396786212921, 0.40301701426506042, 0.099576018750667572, 0.060331128537654877, 0.38482701778411865, 0.26568841934204102, 0.22338102757930756, -0.11310207843780518, 0.14686301350593567, 0.13569504022598267, 0.15287010371685028, 0.47589433193206787, 0.51540529727935791, -0.10719156265258789, 0.29679596424102783, 0.40287524461746216, 0.18764825165271759, 0.30231836438179016, -0.22652168571949005, -0.23210343718528748, -0.18149903416633606, -0.029347449541091919, 0.66170769929885864, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(8) float tensor_data5[10*20] = { 
  -0.43144923448562622, -0.058260016143321991, 0.15211667120456696, 0.10467710345983505, 0.57915282249450684, -0.41220703721046448, -0.21415954828262329, -0.069853290915489197, -0.33091482520103455, -0.53921878337860107, -0.18844893574714661, -0.080043807625770569, 0.46913588047027588, 0.52168983221054077, -0.2589382529258728, 0.018651941791176796, -0.61406791210174561, -0.037004377692937851, -0.15354233980178833, 0.16925852000713348, 
  -0.045214742422103882, 0.11677518486976624, -0.26895004510879517, 0.18795146048069, 0.45792102813720703, 0.40626460313796997, 0.66112077236175537, 0.28469732403755188, 0.18603420257568359, -0.29068106412887573, 0.43359366059303284, -0.02696126326918602, 0.25577762722969055, -0.17965945601463318, -0.35092645883560181, -0.021039579063653946, 0.044808957725763321, 0.67874711751937866, 0.23707827925682068, -0.39401087164878845, 
  -0.34469908475875854, 0.28639256954193115, 0.056749366223812103, -0.21206185221672058, 0.47007328271865845, 0.2866668701171875, 0.57689940929412842, 0.20120608806610107, 0.49774160981178284, 0.28641408681869507, 0.13594828546047211, -0.13749299943447113, 0.3217262327671051, -0.48148921132087708, 0.14910577237606049, 0.17014870047569275, -0.14551423490047455, 0.83412277698516846, -0.40127313137054443, -0.2188200056552887, 
  -0.38366013765335083, -0.046850968152284622, -0.22286936640739441, -0.33053779602050781, 0.15116392076015472, 0.56476515531539917, 0.67261528968811035, 0.814372718334198, 0.65194505453109741, -0.071332827210426331, 0.72900009155273438, 0.27099859714508057, 0.3136231005191803, -0.25937652587890625, 0.055275995284318924, 0.6896091103553772, 0.38806778192520142, 0.53997045755386353, 0.28047975897789001, -0.29707223176956177, 
  0.24865992367267609, 0.02270941250026226, -0.19921691715717316, -0.36205464601516724, -0.27855214476585388, 0.63884788751602173, 0.32748159766197205, 0.19916416704654694, -0.024538960307836533, 0.67965227365493774, 0.38818031549453735, -0.33572548627853394, -0.33458352088928223, 0.20708471536636353, -0.056955564767122269, 0.12589581310749054, 0.31841573119163513, 0.060410540550947189, 0.60066729784011841, 0.18347436189651489, 
  0.32319650053977966, 0.37422168254852295, -0.46796327829360962, 0.0067605730146169662, 0.00041683606104925275, 0.32562366127967834, 0.44022983312606812, 0.4209873378276825, 0.76471793651580811, -0.30302679538726807, -0.02019190788269043, 0.43808361887931824, -0.0082883900031447411, -0.097999714314937592, -0.13758781552314758, 0.6638522744178772, -0.18379944562911987, 0.4215330183506012, -0.25667810440063477, 0.06225239485502243, 
  0.59091627597808838, -0.13011983036994934, 0.095376789569854736, 0.32324859499931335, 0.33102238178253174, 0.068000912666320801, -0.19713634252548218, 0.059011269360780716, 0.34421324729919434, 0.58168303966522217, -0.4470537006855011, 0.3665793240070343, -0.35385113954544067, 0.084846235811710358, 0.12612654268741608, -0.025742704048752785, 0.31690007448196411, -0.37222892045974731, 0.21712186932563782, -0.022284217178821564, 
  -0.17070749402046204, 0.38415801525115967, -0.11703500151634216, -0.40138453245162964, 0.17712384462356567, -0.031873077154159546, -0.28329011797904968, -0.61713671684265137, 0.50982004404067993, 0.34300634264945984, 0.1429663747549057, 0.58372205495834351, 0.055672001093626022, 0.23530367016792297, -0.092195309698581696, -0.16871637105941772, -0.10934681445360184, -0.13282176852226257, -0.16004516184329987, 0.43657782673835754, 
  -0.50811874866485596, 0.26716789603233337, -0.032466214150190353, 0.20881853997707367, 0.49600130319595337, -0.13458313047885895, 0.61544638872146606, -0.17467129230499268, -0.15390390157699585, -0.48197397589683533, 0.51970309019088745, 0.32222151756286621, 0.38335257768630981, 0.41927406191825867, -0.22519765794277191, 0.2502613365650177, -0.55894297361373901, 0.71576589345932007, -0.083379559218883514, -0.050770983099937439, 
  -0.14017531275749207, 0.0948496013879776, 0.18284006416797638, 0.31970506906509399, -0.11691001057624817, 0.18037539720535278, 0.13079668581485748, -0.41598877310752869, 0.37618985772132874, -0.13501380383968353, -0.23941171169281006, 0.27493217587471008, -0.29329594969749451, 0.056958861649036407, -0.41575944423675537, 0.067246340215206146, 0.33087745308876038, 0.19716617465019226, -0.14008678495883942, 0.59025025367736816, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(8) float tensor_data6[3*10] = { 
  -0.28457251191139221, -0.98900574445724487, -0.95413756370544434, 0.26916509866714478, 0.55976104736328125, 0.0043806601315736771, 0.35360363125801086, 0.27127933502197266, -0.66488641500473022, 0.021993115544319153, 
  0.60160320997238159, -0.48788756132125854, 0.15820983052253723, -0.87515121698379517, 0.01920446939766407, -0.1269698292016983, -0.014015474356710911, 0.30434122681617737, 0.36584341526031494, 0.073601521551609039, 
  -0.9777410626411438, 0.35009446740150452, 0.42339125275611877, 0.74267840385437012, 0.46131294965744019, 0.38649913668632507, -0.45579385757446289, -0.30750739574432373, 0.38207903504371643, -0.55672329664230347, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
